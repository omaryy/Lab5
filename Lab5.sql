DROP SCHEMA IF EXISTS lab;
CREATE SCHEMA Lab;
USE Lab;

CREATE TABLE IF NOT EXISTS DEPT(
	DNUMBER INT,
    DNAME VARCHAR(50) DEFAULT 'Omar DEPT',
    FOUNDED DATE DEFAULT '2021-10-10',
    MGR_SSN INT,
    BUDGET INT DEFAULT 10,
	PRIMARY KEY(DNUMBER)
);

CREATE TABLE IF NOT EXISTS EMPLOYEE(
	SSN INT,
    ENAME VARCHAR(50) DEFAULT 'Omar',
    BDATE DATE DEFAULT '2021-10-10',
    DNO INT,
    SALARY INT,
    PRIMARY KEY(SSN)
);

ALTER TABLE DEPT ADD CONSTRAINT FK_DEPT FOREIGN KEY(MGR_SSN) REFERENCES EMPLOYEE(SSN) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE FOREIGN KEY(DNO) REFERENCES DEPT(DNUMBER) ON UPDATE CASCADE ON DELETE CASCADE;


-- stored function to get the number of employees of certain department

DROP FUNCTION IF EXISTS COUNT_EMP;
DELIMITER $$
CREATE FUNCTION COUNT_EMP(DNUMBER_ INT) RETURNS INT NOT DETERMINISTIC deterministic
BEGIN
	DECLARE EMPLOYEE_CNT INT;
	SELECT COUNT(*) INTO EMPLOYEE_CNT FROM EMPLOYEE AS E
    WHERE E.DNO = DNUMBER_;
    RETURN(EMPLOYEE_CNT);
END$$




DROP PROCEDURE IF EXISTS VALIDATE_YEAR$$
DELIMITER $$
CREATE PROCEDURE VALID_YEAR()
BEGIN 
	UPDATE DEPT 
    SET FOUNDED = '1960-01-01'
    WHERE YEAR(FOUNDED) < 1960; 
END$$



DROP TRIGGER IF EXISTS BEFORE_INSERT_EMP$$
CREATE TRIGGER BEFORE_INSERT_EMP BEFORE INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
	DECLARE DEPT_NUM INT;
    DECLARE TOTAL_EMP_CNT INT;
    SET DEPT_NUM = NEW.DNO;
    SELECT COUNT(*) INTO TOTAL_EMP_CNT FROM EMPLOYEE
    WHERE DNO = DEPT_NUM;
    IF TOTAL_EMP_CNT >= 8
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'INVALID INSERT AS MAX OF DEP IS 8 EMPLOYEES';
	END IF;
END$$




DROP TRIGGER IF EXISTS ON_UPDATE_CASCADE_IMPLEMENTATION$$
CREATE TRIGGER ON_UPDATE_CASCADE_IMPLEMENTATION AFTER UPDATE ON DEPT FOR EACH ROW
BEGIN
	
	IF !(NEW.DNUMBER <=> OLD.DNUMBER)
    THEN
		UPDATE EMPLOYEE
        SET DNO = NEW.DNUMBER
		WHERE DNO = OLD.DNUMBER;
	END IF;
END$$



DROP TRIGGER IF EXISTS AFTER_UPDATE_SALARY$$
CREATE TRIGGER AFTER_UPDATE_SALARY AFTER UPDATE ON EMPLOYEE FOR EACH ROW
BEGIN
	DECLARE MGR_SALARY INT;
    DECLARE MGR_ID INT;
    DECLARE DEPT_ID INT;
    IF !(NEW.SALARY <=> OLD.SALARY) AND NEW.SALARY > OLD.SALARY
    THEN
		SET DEPT_ID = OLD.DNO;
        SELECT MGR_SSN INTO MGR_ID FROM DEPT WHERE DNUMBER = DEPT_ID;
        SELECT SALARY INTO MGR_SALARY FROM EMPLOYEE WHERE SSN = MGR_ID;
		
        IF NEW.SSN != MGR_ID AND MGR_SALARY < NEW.SALARY THEN
			CALL UPDATE_SALARY_OUTSIDE(NEW.SALARY, MGR_ID);
        END IF;
	END IF;
END$$


DROP PROCEDURE IF EXISTS UPDATE_SALARY_OUTSIDE$$
DELIMITER $$
CREATE PROCEDURE UPDATE_SALARY_OUTSIDE(IN NEW_SALARY INT, IN MGR_ID INT)
BEGIN 
	UPDATE EMPLOYEE 
	SET SALARY = NEW_SALARY
	WHERE SSN = MGR_ID; 
END$$



DELIMITER ;

-- INSERT SOME DATA
INSERT INTO DEPT (DNUMBER, FOUNDED)
VALUES 	(1, '1970-05-01'),
		(2, '1950-11-01');
        
INSERT INTO EMPLOYEE (SSN, SALARY, DNO)
VALUES 	(1, 40, 1),
		(2, 50, 2),
		(3, 60, 2);
        
UPDATE DEPT SET MGR_SSN = 2 WHERE DNUMBER = 1;
UPDATE DEPT SET MGR_SSN = 3 WHERE DNUMBER = 2;

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPT;


-- TEST

-- (1)
SELECT DNUMBER, COUNT_EMP(DNUMBER) FROM DEPT GROUP BY DNUMBER; 

-- (2)
CALL VALID_YEAR();
SELECT * FROM DEPT;

-- (3)
INSERT INTO EMPLOYEE (SSN, SALARY, DNO)
VALUES 	(4, 70, 2),
		(5, 1000, 2),
		(6, 40, 2),
        (7, 90, 2),
		(8, 30, 2),
		(9, 60, 2);

-- now department 2 has 8 employees
INSERT INTO EMPLOYEE (SSN, SALARY, DNO)
VALUES 	(4, 70, 2);

-- remove the testing rows 
DELETE FROM EMPLOYEE WHERE SSN >= 4;
SELECT * FROM EMPLOYEE;


-- (4)
UPDATE DEPT SET DNUMBER = 200 WHERE DNUMBER = 1;
-- the dno with 1 will be 200, check that in EMPLOYEE table
SELECT * FROM EMPLOYEE;
-- return the prev state of DEPT table
UPDATE DEPT SET DNUMBER = 7 WHERE DNUMBER = 200;


-- (5)
SELECT * FROM EMPLOYEE;